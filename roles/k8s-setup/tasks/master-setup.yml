---
- name: Initialize Kubernetes master with kubeadm init.
  command: >
    kubeadm init
    --pod-network-cidr={{ kubernetes_pod_network.cidr }}
    --apiserver-advertise-address={{ kubernetes_apiserver_advertise_address | default(ansible_default_ipv4.address, true) }}
  register: kubeadmin_init
  when: not kubernetes_init_stat.stat.exists

- pause: seconds=60

- name: Print the init output to screen.
  debug:
    var: kubeadmin_init.stdout
    verbosity: 2
  when: not kubernetes_init_stat.stat.exists

- name: Conf $HOME/.kube
  file:
    path: $HOME/.kube
    state: directory
    mode: 0755
  register: path

- name: print path
  debug:
    var: path

- name: Symlink the kubectl admin.conf to ~/.kube/conf.
  file:
    src: /etc/kubernetes/admin.conf
    dest: $HOME/.kube/config
    state: link
    mode: 0644

- name: Changing permission file for kube conf
  file:
    path: $HOME/.kube/config
    owner: "{{ ansible_effective_user_id }}"
    group: "{{ ansible_effective_group_id }}"

- name: Configure Flannel networking.
  command: "{{ item }}"
  with_items:
    - kubectl apply -f {{ kubernetes_flannel_manifest_file }}
  register: flannel_result
  changed_when: "'created' in flannel_result.stdout"
  when: kubernetes_pod_network.cni == 'flannel'


- name: Configure Calico networking.
  command: "{{ item }}"
  with_items:
    - kubectl apply -f {{ kubernetes_calico_manifest_file }}
  register: calico_result
  changed_when: "'created' in calico_result.stdout"
  when: kubernetes_pod_network.cni == 'calico'


- name: Get Kubernetes version for Weave installation.
  shell: kubectl version | base64 | tr -d '\n'
  changed_when: false
  register: kubectl_version
  when: kubernetes_pod_network.cni == 'weave'


- name: Configure Weave networking.
  command: "{{ item }}"
  with_items:
    - "kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version={{ kubectl_version.stdout_lines[0] }}"
  register: weave_result
  changed_when: "'created' in weave_result.stdout"
  when: kubernetes_pod_network.cni == 'weave'

# TODO: Check if taint exists with something like `kubectl describe nodes`
# instead of using kubernetes_init_stat.stat.exists check.
- name: Allow pods on master node (if configured).
  command: "kubectl taint nodes --all node-role.kubernetes.io/master-"
  when:
    - kubernetes_allow_pods_on_master | bool
    - not kubernetes_init_stat.stat.exists
